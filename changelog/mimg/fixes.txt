M!Image V 3.5.0

***** V 3.5.0
<No Fixes>

***** V 3.4.0
<No Fixes>

***** V 3.3.0
<No Fixes>

***** V 3.2.0
<No Fixes>

***** V 3.1.1
Defect #21
- MImgLoadFromStringBase64 always return 0  (since 3.0.2, worked in earlier versions)

***** V 3.1.0
Defect #20
- MImgCreateHICON causes a GDI leak (since 3.0.1, no leak in earlier versions)

***** V 3.0.2
Defect #19
- Fixed multithreading issue regarding strings (TD 7.1)

***** V 3.0.1
Defect #18
 - CMimgCtl doesn't show the vertical scrollbar when fit mode MIMG_FIT_WIDTH is set, and/or the horizontal scrollbar when MIMG_FIT_HEIGHT is set

***** V 3.0.0
<No Fixes>

***** V 2.6.0
<No Fixes>

***** V 2.5.5
Defect #17
- MImgLoadFromHandle
  Loading very large bitmaps may lead to a GPF

M!Image V 2.5.4

***** V 2.5.4
Defect #16
 - MImgLoadFromScreen
   When capturing a window and Aero is activated, the title bar isn't captured correctly

***** V 2.5.3
<No Fixes>

***** V 2.5.2
Defect #15
 - MImgCreateVisPic
   Under certain conditions, a picture created from a 24BPP bitmap has no transparency.

Defect #14
 - MImgPutImage
   Under certain conditions, an alpha channel without any transparency is created for the destination image.
   This bug was introduced in V2.5.0.

***** V 2.5.1
<No Fixes>

***** V 2.5.0
Defect #13
 - Saving an image as PNG fails when the image has pixel opacity and the color depth is < 24 BPP

***** V 2.4.3
Defect #12
 - Under certain conditions, a created icon ( by MImgCreateHICON or MImgSave ) looks frayed

***** V 2.4.2
<No Fixes>

***** V 2.4.1
<No Fixes>

***** V 2.4.0
<No Fixes>

***** V 2.3.9
<No Fixes>

***** V 2.3.8
Defect #12
 - MImgLoadFromModule causes a memory leak ( the loaded module isn't freed )

***** V 2.3.7
Defect #11
 - Under certain conditions, 32Bit Icons loaded with MImgLoadFromFileInfo, MImgLoadFromHandle or MImgLoadFromVisPic have no transparency

***** V 2.3.6
Defect #10
 - Under certain conditions and in particular with icons, the following functions may not work properly:
   MImgCreateHICON
   MImgGetString
   MImgSave
   This was introduced in 2.3.5 :o(.

***** V 2.3.5
Defect #9
 - Drawing images in a device context with palettes ( e.g. when drawing on the screen and the color depth is 8 bit ) is very slow.
   The reason was that M!Image created and realized a palette derived from the system palette every time an image was drawn.
   Now M!Image uses the palette which is currently selected into the device context.

***** V 2.3.3
Defect #8
 - When an icon - either saved with MImgSave or created with MImgCreateHICON - is drawn with the API function
   DrawIcon and/or DrawIconEx, the transparency is missing.
   This only occurs if the "transparent pixels" aren't black!

Defect #7
 - An image with transparent color looses it's transparency after MImgSubstColor is called 
   when the color to substitute is MIMG_COLOR_UNDEF or equal to the transparent color

Defect #6
 - An image with transparent color looses it's transparency after MImgDisable is called

Defect #5
 - An image disabled with MImgDisable becomes type MIMG_TYPE_UNKNOWN

Defect #4
 - An image loaded from a HBITMAP with MImgLoadFromHandle is type MIMG_TYPE_UNKNOWN

***** V 2.3.1
Defect #3
 - Under certain conditions, Icons loaded with one of the MIMG_FRAME_ICON constants look "damaged"

Defect #2
 - An image loaded with MImgLoadFromClipboard is type MIMG_TYPE_UNKNOWN

Defect #1
 - Under certain conditions, Icons loaded with MImgLoadFromFileInfo have the wrong size